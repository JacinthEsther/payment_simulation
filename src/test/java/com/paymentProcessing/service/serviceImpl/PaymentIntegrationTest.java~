package com.paymentProcessing.service.serviceImpl;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.paymentProcessing.dtos.PaymentRequest;
import com.paymentProcessing.entities.Parent;
import com.paymentProcessing.entities.Student;
import com.paymentProcessing.repositories.ParentRepository;
import com.paymentProcessing.repositories.StudentRepository;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.MediaType;
import org.springframework.security.test.context.support.WithMockUser;
import org.springframework.test.web.servlet.MockMvc;

import java.math.BigDecimal;
import java.util.Set;
import java.util.UUID;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

@SpringBootTest
@AutoConfigureMockMvc
public class PaymentIntegrationTest {

    @Autowired private MockMvc mockMvc;
    @Autowired private ObjectMapper objectMapper;
    @Autowired private ParentRepository parentRepository;
    @Autowired private StudentRepository studentRepository;

    private UUID parentAId, parentBId;
    private UUID student1Id;
    private UUID student2Id;

    @BeforeEach
    void setup() {
        parentRepository.deleteAll();
        studentRepository.deleteAll();

        // Creating Parents
        Parent parentA = new Parent();
        parentA.setName("Parent A");
        parentA.setBalance(BigDecimal.valueOf(1000));
        parentA = parentRepository.save(parentA);
        parentAId = parentA.getId();
        BigDecimal initialParentABalance = parentA.getBalance();

        Parent parentB = new Parent();
        parentB.setName("Parent B");
        parentB.setBalance(BigDecimal.valueOf(1000));
        parentB = parentRepository.save(parentB);
        parentBId = parentB.getId();
        BigDecimal initialParentBBalance = parentB.getBalance();

        // Creating Students
        Student student1 = new Student();
        student1.setName("Student 1");
        student1.setBalance(BigDecimal.ZERO);
        student1.setParents(Set.of(parentA, parentB));  // Shared student
        student1 = studentRepository.save(student1);
        student1Id = student1.getId();
        BigDecimal initialStudent1Balance = student1.getBalance();

        Student student2 = new Student();
        student2.setName("Student 2");
        student2.setBalance(BigDecimal.ZERO);
        student2.setParents(Set.of(parentA));  // Unique student for Parent A
        student2 = studentRepository.save(student2);
        student2Id = student2.getId();
        BigDecimal initialStudent2Balance = student2.getBalance();

        Student student3 = new Student();
        student3.setName("Student 3");
        student3.setBalance(BigDecimal.ZERO);
        student3.setParents(Set.of(parentB));  // Unique student for Parent B
        student3 = studentRepository.save(student3);
        UUID student3Id = student3.getId();
        BigDecimal initialStudent3Balance = student3.getBalance();
    }

    @Test
    @WithMockUser(username = "admin", roles = {"ADMIN"})
    void testPaymentForUniqueStudent() throws Exception {
        BigDecimal paymentAmount = BigDecimal.valueOf(100);
        BigDecimal feeOrDiscountRate = BigDecimal.valueOf(0.1); // 10%

        PaymentRequest request = new PaymentRequest();
        request.setParentId(parentAId);
        request.setStudentId(student2Id); // Unique child
        request.setPaymentAmount(paymentAmount);
        request.setFeeOrDiscountRate(feeOrDiscountRate);

        // Get former balances before payment
        Parent parentA = parentRepository.findById(parentAId).orElseThrow();
        Student student2 = studentRepository.findById(student2Id).orElseThrow();
        BigDecimal formerParentABalance = parentA.getBalance();
        BigDecimal formerStudent2Balance = student2.getBalance();

        mockMvc.perform(post("/api/payments")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(request)))
                .andExpect(status().isOk());

        // Get new balances after payment
        Parent updatedParentA = parentRepository.findById(parentAId).orElseThrow();
        Student updatedStudent2 = studentRepository.findById(student2Id).orElseThrow();

        BigDecimal expectedAdjustedAmount = paymentAmount.multiply(BigDecimal.ONE.add(feeOrDiscountRate));
        BigDecimal expectedParentABalance = formerParentABalance.subtract(expectedAdjustedAmount);
        BigDecimal expectedStudent2Balance = formerStudent2Balance.add(expectedAdjustedAmount);

        // Assert the real balance of Parent A and Student 2
        assertEquals(0, expectedParentABalance.compareTo(updatedParentA.getBalance()), "Parent A balance should be reduced correctly");
        assertEquals(0, expectedStudent2Balance.compareTo(updatedStudent2.getBalance()), "Student 2 balance should be increased correctly");

        // Assert the balances are updated in the database correctly
        Parent actualParentA = parentRepository.findById(parentAId).orElseThrow();
        Student actualStudent2 = studentRepository.findById(student2Id).orElseThrow();

        // Output the former and new balances for debugging or validation
        System.out.println("Parent A: Former Balance = " + formerParentABalance + ", New Balance = " + actualParentA.getBalance());
        System.out.println("Student 2: Former Balance = " + formerStudent2Balance + ", New Balance = " + actualStudent2.getBalance());

        assertEquals(expectedParentABalance, actualParentA.getBalance(), "Parent A's actual balance should match the expected balance.");
        assertEquals(expectedStudent2Balance, actualStudent2.getBalance(), "Student 2's actual balance should match the expected balance.");
    }

    @Test
    @WithMockUser(username = "admin", roles = {"ADMIN"})
    void testPaymentForSharedStudent() throws Exception {
        BigDecimal paymentAmount = BigDecimal.valueOf(100);
        BigDecimal feeOrDiscountRate = BigDecimal.valueOf(0.1); // 10%

        PaymentRequest request = new PaymentRequest();
        request.setParentId(parentAId);
        request.setStudentId(student1Id); // Shared child
        request.setPaymentAmount(paymentAmount);
        request.setFeeOrDiscountRate(feeOrDiscountRate);

        // Get former balances before payment
        Parent parentA = parentRepository.findById(parentAId).orElseThrow();
        Parent parentB = parentRepository.findById(parentBId).orElseThrow();
        Student student1 = studentRepository.findById(student1Id).orElseThrow();
        BigDecimal formerParentABalance = parentA.getBalance();
        BigDecimal formerParentBBalance = parentB.getBalance();
        BigDecimal formerStudent1Balance = student1.getBalance();

        mockMvc.perform(post("/api/payments")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(request)))
                .andExpect(status().isOk());

        // Get new balances after payment
        Parent updatedParentA = parentRepository.findById(parentAId).orElseThrow();
        Parent updatedParentB = parentRepository.findById(parentBId).orElseThrow();
        Student updatedStudent1 = studentRepository.findById(student1Id).orElseThrow();

        BigDecimal expectedAdjustedAmount = paymentAmount.multiply(BigDecimal.ONE.add(feeOrDiscountRate));

        BigDecimal expectedParentABalance = formerParentABalance.subtract(expectedAdjustedAmount);
        BigDecimal expectedParentBBalance = formerParentBBalance.subtract(expectedAdjustedAmount);
        BigDecimal expectedStudent1Balance = formerStudent1Balance.add(expectedAdjustedAmount);

        // Assert the real balance of Parent A, Parent B, and Student 1
        assertEquals(0, expectedParentABalance.compareTo(updatedParentA.getBalance()), "Parent A balance should be reduced correctly");
        assertEquals(0, expectedParentBBalance.compareTo(updatedParentB.getBalance()), "Parent B balance should be reduced correctly");
        assertEquals(0, expectedStudent1Balance.compareTo(updatedStudent1.getBalance()), "Shared Student balance should be updated correctly");

        // Assert the balances are updated in the database correctly
        Parent actualParentA = parentRepository.findById(parentAId).orElseThrow();
        Parent actualParentB = parentRepository.findById(parentBId).orElseThrow();
        Student actualStudent1 = studentRepository.findById(student1Id).orElseThrow();

        // Output the former and new balances for debugging or validation
        System.out.println("Parent A: Former Balance = " + formerParentABalance + ", New Balance = " + actualParentA.getBalance());
        System.out.println("Parent B: Former Balance = " + formerParentBBalance + ", New Balance = " + actualParentB.getBalance());
        System.out.println("Student 1: Former Balance = " + formerStudent1Balance + ", New Balance = " + actualStudent1.getBalance());

        assertEquals(expectedParentABalance, actualParentA.getBalance(), "Parent A's actual balance should match the expected balance.");
        assertEquals(expectedParentBBalance, actualParentB.getBalance(), "Parent B's actual balance should match the expected balance.");
        assertEquals(expectedStudent1Balance, actualStudent1.getBalance(), "Student 1's actual balance should match the expected balance.");
    }



    @Test
    @WithMockUser(username = "user", roles = {"USER"})
    void testPaymentForNonAdminUser() throws Exception {
        BigDecimal paymentAmount = BigDecimal.valueOf(100);
        BigDecimal feeOrDiscountRate = BigDecimal.valueOf(0.1); 

        PaymentRequest request = new PaymentRequest();
        request.setParentId(parentAId);
        request.setStudentId(student1Id);
        request.setPaymentAmount(paymentAmount);
        request.setFeeOrDiscountRate(feeOrDiscountRate);

        mockMvc.perform(post("/api/payments")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(request)))
                .andExpect(status().isForbidden());
    }

    @Test
    @WithMockUser(username = "admin", roles = {"ADMIN"})
    void testPaymentForAdminUserWithDifferentRoles() throws Exception {
        BigDecimal paymentAmount = BigDecimal.valueOf(100);
        BigDecimal feeOrDiscountRate = BigDecimal.valueOf(0.1);

        PaymentRequest request = new PaymentRequest();
        request.setParentId(parentAId);
        request.setStudentId(student1Id);
        request.setPaymentAmount(paymentAmount);
        request.setFeeOrDiscountRate(feeOrDiscountRate);

        mockMvc.perform(post("/api/payments")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(request)))
                .andExpect(status().isOk());
    }
}
